all dsa program
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct calElement
{
	char*day;
	int date;
	char*activity;
};
struct calElement*create()
{
	struct calElement*calendar;
	calendar=(struct calElement*)malloc(sizeof(struct calElement)*7);
	return calendar;
}
void read(struct calElement*calendar)
{
	char day[10];
	char activity[25];
	int i, date;
	for(i=0; i<7;i++)
	{
		printf("Enter the day:");
		scanf("%s",day);
		calendar[i].day=(char*)malloc(strlen(day)+1);
		strcpy(calendar[i].day,day);
		printf("Enter the date:");
		scanf("%d",&date);
		calendar[i].date=date;
		getchar();
		printf("Enter description of the activity:");
		scanf("%[^\n]s",activity);
		calendar[i].activity=(char*)malloc(strlen(activity)+1);
		strcpy(calendar[i].activity,activity);
	}
}
void display(struct calElement*calendar)
{
	int i;
	printf("\n\n Your calendar:\n");
	printf("Day\t\tDate\t\tActivity");
	for(i=0; i<7; i++)
	{
		printf("\n%s\t\t%d\t\t%s",calendar[i].day,calendar[i].date,calendar[i].activity);
	}
}
void main()
{
	struct calElement*calendar;
	calendar=create();
	read(calendar);
	display(calendar);
	free(calendar);
}
2.
#include<stdio.h>
char str[100], pat[50], rep[50], ans[100];
int i, j, c, m, k, flag=0;
void stringmatch()
{
	i=m=c=j=0;
	while(str[c]!='\0')
	{
		if(str[m]==pat[i])
		{
			i++; m++;
			if(pat[i]=='\0')
			{
				flag=1;
				for(k=0; rep[k]!='\0';k++,j++)
				ans[j]=rep[k];
				i=0;
				c=m;
			}
		}
		else
		{
			ans[j]=str[c];
			j++;
			c++;
			m=c;
			i= 0;
		}//else ends
	} //end of while
	ans[j]='\0';
} //end stringmatch()

void main()
{
	
	printf("\nEnter a main string \n");
	gets(str);
	printf("\nEnter a pattern string \n");
	gets(pat);
	printf("\nEnter a replace string \n");
	gets(rep);
	stringmatch();
	if(flag==1)
	printf("\nThe resultant string is\n %s" , ans);
	else
	printf("\nPattern string NOT found\n")
}
3.
#include<stdio.h>
#define MAX 4
int top = -1;
void push(int stack[], int item)
{
	if(top == (MAX-1))
	printf("\n\nStack is Overflow");
	else
	{
		stack[++top] = item;
	}
}
void pop(int stack[])
{
	int ret;
	if(top == -1)
	printf("\n\nStack is Underflow");
	else
	{
		ret = stack[top--];
		printf("\nPopped element is %d", ret);
	}
}
void palindrome(int stack[])
{
	int i,k, temp;
	temp=k=top;
	if(top == -1)
	printf("\n\nStack is Empty");
	else
	{
		for(i=0; i<temp; i++)
		{
			if(stack[i] != stack[k--])
			break;
		}
		if(i==temp)
		printf("\nStack contents are Palindrome");
		else
		printf("\nStack contents are not palindrome");
	}
}
void display(int stack[])
{
	int i;
	if(top == -1)
	printf("\nStack is Empty");
	else
	{
		printf("\nThe stack contents are:");
		for(i=top; i>=0; i--)
		printf("\n\n-----| %d |----", stack[i]);
		printf("\n");
	}
}
void main()
{
int item,stack[MAX],ch;

while(1)
{
printf("\n\n----MAIN MENU----\n");
printf("\n1.PUSH");
printf("\n2.POP");
printf("\n3.PALINDROME");
printf("\n4.Exit");
printf("\nEnter Your Choice: ");
scanf("%d", &ch);
switch(ch)
{
	case 1: printf("\nEnter a element to be pushed: ");
	scanf("%d", &item);
	push(stack, item);
	display(stack);
	break;
	case 2:pop(stack);
	if(top!=-1)
	display(stack);
	break;
	case 3:
	palindrome(stack);
	break;
	case 4:
	exit(0); break;
	default:printf("\nInvalid choice \n");
 }
}
}
4.
 #include<stdio.h>
#include<string.h>

int top;
void push(char stack[],char ele)
{
	stack[++top]=ele;
}
char pop(char stack[])
{
	return stack[top--];
}
char stacktop(char stack[])
{
	return(stack[top]);
}

int precd(char op)
{
	switch(op)
	{
		case'^':return 3;
		case'*':
		case'/':
		case'%':return 2;
		case'+':
		case'-':return 1;
		case'(':return 0;
		default:return 0;
	}
}
void infix_postfix(char infix[],char postfix[])
{
	char symb,stack[40];
	int i=0;int j=0;
	top=-1;
	while(infix[i]!='\0')
	{
		symb=infix[i++];
		if(isalpha(symb)||isdigit(symb))
			postfix[j++]=symb;

			else if(symb=='(')
			push(stack,'(');
			else if(symb==')')
			{
			while(stacktop(stack)!='(')
			postfix[j++]=pop(stack);
			pop(stack);
			}
			else
			{
			while(top!=-1&&precd(stacktop(stack))>=precd(symb))
			postfix[j++]=pop(stack);
			push(stack,symb);
			}
	}
		while(top!=-1)
		postfix[j++]=pop(stack);
		postfix[j]='\0';
}
void main()
{
	char infix[50];
	char postfix[50],stack[40],ele,op;
	printf("Enter a valid infix expression\n");
	scanf("%s",infix);
	infix_postfix(infix,postfix);
	printf("The postfix expression is\n");
	printf("%s\n",postfix);
}
5.
#include<stdio.h>
#include<math.h>
#include<string.h>

void push(float[],float);
float pop(float[]);
int top;

float Eval_postfix(char postfix[])
{
	float opndstk[50],op1,op2;
	int i;char symb;
	top=-1;
	for(i=0;postfix[i]!='\0';i++)
	{
		symb=postfix[i];
		if(isdigit(symb))
		push(opndstk,(float)(symb-'0'));
		else
		{
			op2=pop(opndstk);
			op1=pop(opndstk);
			switch(symb)
			{
				case'*':push(opndstk,op1*op2);
				break;
				case'/':push(opndstk,op1/op2);
				break;
				case'+':push(opndstk,op1+op2);
				break;
				case'-':push(opndstk,op1-op2);
				break;
				case'$':push(opndstk,pow(op1,op2));
				break;
			}
		}
	}
	return(pop(opndstk));
}
void push(float opndstk[],float value)
{
	opndstk[++top]=value;
}
float pop(float opndstk[])
{
	return(opndstk[top--]);
}
void main()
{
	char postfix[50];
	float fvalue;
	printf("enter the valid expression:\n");
	scanf("%s",postfix);
	fvalue=Eval_postfix(postfix);
	printf("\n Evaluated value is:%.2f",fvalue);
}
b. 
#include<stdio.h>
#include<math.h>

void tower(int n, int source, int temp,int destination)
{
	if(n==0)
	return;
	tower(n-1, source, destination, temp);
	printf("\nMove disc %d from %c to %c", n, source, destination);
	tower(n-1, temp, source, destination);
}
void main()
{
	int n;
	printf("\nEnter the number of discs: \n");
	scanf("%d", &n);
	tower(n, 'A', 'B', 'C');
	printf("\n\nTotal Number of moves are: %d",(int)pow(2,n)-1);
}
6.
#include <stdio.h>
#include<stdlib.h>
#include<stdio_ext.h>
#define MAX 3

char cq[MAX];
int front = -1, rear = -1;

void insert(char);
void delete();
void display();
void main()
{
             int ch;
             char item;
             while(1)
             {
                            printf("\n\n~~Main Menu~~");
                            printf("\n==> 1. Insertion and Overflow Demo");
                            printf("\n==> 2. Deletion and Underflow Demo");
                            printf("\n==> 3. Display");
                            printf("\n==> 4. Exit");
                            printf("\nEnter Your Choice: ");
                            scanf("%d", &ch);
                            __fpurge(stdin);
                           switch(ch)
                          {
                                           case 1:        printf("\n\nEnter the element to be inserted: ");
                                                              scanf("%c", &item);
                                                              insert(item);
                                                              break;
                                           case 2:        delete();
                                                              break;
                                           case 3:        display();
                                                              break;
                                            case 4:       exit(0);
                                            default:      printf("\n\nPlease enter a valid choice");
                            }
               }
}

void insert(char item)
{
                 if(front == (rear+1)%MAX)
                 {
                              printf("\n\n~~Circular Queue Overflow~~");
                 }
                 else
                 {
                             if(front == -1)
                                             front = rear = 0;
                             else
                                              rear = (rear+1)%MAX;
                             cq[rear] = item;
                  }
}

void delete()
{
                char item;
                if(front == -1)
                {
                              printf("\n\n~~Circular Queue Underflow~~");
                }
                else
                {
                               item = cq[front];
                               printf("\n\nDeleted element from the queue is: %c ",item );
                               

                               if(front == rear) //only one element
                                                front = rear = -1;
                               else
                                               front = (front+1)%MAX;
                 }
}


void display ()
{
                   int i ;
                   if(front == -1)
                   {
                                 printf("\n\nCircular Queue Empty");
                   }
                   else
                   {
                                printf("\nCircular Queue contents are:\n");
                                printf("Front[%d]-> ", front);
                               for(i = front; i != rear ; i = (i+1)%MAX)
                               {
                                                   printf(" %c", cq[i]);
                               }
                               printf(" %c", cq[i]);
                               printf(" <-[%d]Rear", rear);
                    }
}
7.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Structure to represent a student
struct Student {
    char USN[20];
    char Name[50];
    char Programme[20];
    int Sem;
    char PhNo[15];
    struct Student *next;
};

// Global variable to hold the head of the linked list
struct Student *head = NULL;

// Function prototypes
void frontInsertion();
void displayAndCount();
void endInsertion();
void frontDeletion();
void endDeletion();
void menu();

int main() {
    int choice;
    do {
        menu();
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch(choice) {
            case 1:
                frontInsertion();
                break;
            case 2:
                displayAndCount();
                break;
            case 3:
                endInsertion();
                break;
            case 4:
                frontDeletion();
                break;
            case 5:
                endDeletion();
                break;
            case 6:
                printf("Exiting program.\n");
                exit(0);
            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
    } while(choice != 6);

    return 0;
}

// Function to display menu
void menu() {
    printf("\nMenu:\n");
    printf("1. Create a SLL of N Students Data by using front insertion\n");
    printf("2. Display the status of SLL and count the number of nodes in it\n");
    printf("3. Perform Insertion at End of SLL\n");
    printf("4. Perform Deletion at Front of SLL (Demonstration of stack)\n");
    printf("5. Perform Deletion at End of SLL\n");
    printf("6. Exit\n");
}

// Function to insert a student at the front of the linked list
void frontInsertion() {
    struct Student *newStudent = (struct Student*)malloc(sizeof(struct Student));
    printf("Enter USN: ");
    scanf("%s", newStudent->USN);
    printf("Enter Name: ");
    scanf("%s", newStudent->Name);
    printf("Enter Programme: ");
    scanf("%s", newStudent->Programme);
    printf("Enter Semester: ");
    scanf("%d", &newStudent->Sem);
    printf("Enter Phone Number: ");
    scanf("%s", newStudent->PhNo);
    newStudent->next = head;
    head = newStudent;
}

// Function to display the linked list and count the number of nodes
void displayAndCount() {
    struct Student *temp = head;
    int count = 0;
    printf("\nStudent Data:\n");
    while(temp != NULL) {
        printf("USN: %s, Name: %s, Programme: %s, Semester: %d, Phone Number: %s\n", temp->USN, temp->Name, temp->Programme, temp->Sem, temp->PhNo);
        temp = temp->next;
        count++;
    }
    printf("Total number of nodes: %d\n", count);
}

// Function to perform insertion at the end of the linked list
void endInsertion() {
    // Implement this function
}

// Function to perform deletion at the front of the linked list
void frontDeletion() {
    // Implement this function
}

// Function to perform deletion at the end of the linked list
void endDeletion() {
    // Implement this function
}
8.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Employee structure
struct Employee {
    int SSN;
    char Name[50];
    char Dept[50];
    char Designation[50];
    float Sal;
    long PhNo;
    struct Employee* prev;
    struct Employee* next;
};

// Function prototypes
void insertEnd(struct Employee** head, struct Employee** tail);
void display(struct Employee* head);
void countNodes(struct Employee* head);
void insertFront(struct Employee** head, struct Employee** tail);
void deleteEnd(struct Employee** head, struct Employee** tail);
void deleteFront(struct Employee** head, struct Employee** tail);

int main() {
    struct Employee* head = NULL;
    struct Employee* tail = NULL;
    int choice;

    do {
        printf("\nMenu:\n");
        printf("1. Create a DLL of N Employees Data\n");
        printf("2. Display the status of DLL and count the number of nodes\n");
        printf("3. Insert at the end of DLL\n");
        printf("4. Insert at the front of DLL\n");
        printf("5. Delete from the end of DLL\n");
        printf("6. Delete from the front of DLL\n");
        printf("7. Demonstrate Double Ended Queue\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1:
                // Create DLL
                printf("Creating DLL...\n");
                insertEnd(&head, &tail);
                break;
            case 2:
                // Display status and count nodes
                printf("Displaying status of DLL...\n");
                display(head);
                countNodes(head);
                break;
            case 3:
                // Insert at end
                printf("Inserting at the end of DLL...\n");
                insertEnd(&head, &tail);
                break;
            case 4:
                // Insert at front
                printf("Inserting at the front of DLL...\n");
                insertFront(&head, &tail);
                break;
            case 5:
                // Delete from end
                printf("Deleting from the end of DLL...\n");
                deleteEnd(&head, &tail);
                break;
            case 6:
                // Delete from front
                printf("Deleting from the front of DLL...\n");
                deleteFront(&head, &tail);
                break;
            case 7:
                // Demonstrate Double Ended Queue
                printf("Demonstrating Double Ended Queue...\n");
                // Implement your Double Ended Queue operations here
                break;
            case 8:
                // Exit
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
    } while(choice != 8);

    return 0;
}

void insertEnd(struct Employee** head, struct Employee** tail) {
    // Implement insertion at end here
}

void display(struct Employee* head) {
    // Implement display function here
}

void countNodes(struct Employee* head) {
    // Implement counting of nodes here
}

void insertFront(struct Employee** head, struct Employee** tail) {
    // Implement insertion at front here
}

void deleteEnd(struct Employee** head, struct Employee** tail) {
    // Implement deletion from end here
}

void deleteFront(struct Employee** head, struct Employee** tail) {
    // Implement deletion from front here
}
9.
#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 10

char queue[MAX_SIZE];
int front = -1, rear = -1;

void insertElement(char element) {
    if ((front == 0 && rear == MAX_SIZE - 1) || (rear == (front - 1) % (MAX_SIZE - 1))) {
        printf("Queue Overflow\n");
        return;
    } else if (front == -1) {
        front = rear = 0;
    } else if (rear == MAX_SIZE - 1 && front != 0) {
        rear = 0;
    } else {
        rear++;
    }
    queue[rear] = element;
}

char deleteElement() {
    if (front == -1) {
        printf("Queue Underflow\n");
        return '\0';
    }
    char deletedElement = queue[front];
    if (front == rear) {
        front = rear = -1;
    } else if (front == MAX_SIZE - 1) {
        front = 0;
    } else {
        front++;
    }
    return deletedElement;
}

void displayQueue() {
    if (front == -1) {
        printf("Queue is empty\n");
        return;
    }
    int i = front;
    printf("Circular Queue elements: ");
    if (front <= rear) {
        while (i <= rear) {
            printf("%c ", queue[i]);
            i++;
        }
    } else {
        while (i < MAX_SIZE) {
            printf("%c ", queue[i]);
            i++;
        }
        i = 0;
        while (i <= rear) {
            printf("%c ", queue[i]);
            i++;
        }
    }
    printf("\n");
}

int main() {
    int choice;
    char element;
    
    do {
        printf("\nCircular Queue Operations:\n");
        printf("1. Insert Element\n");
        printf("2. Delete Element\n");
        printf("3. Display Queue\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch (choice) {
            case 1:
                printf("Enter element to insert: ");
                scanf(" %c", &element);
                insertElement(element);
                break;
            case 2:
                printf("Deleted Element: %c\n", deleteElement());
                break;
            case 3:
                displayQueue();
                break;
            case 4:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    } while (1);
    
    return 0;
}
10.
#include<stdio.h>
#include<stdlib.h>

struct Btree
{
	struct Btree *lchild;
	int data;
	struct Btree *rchild;
};

struct Btree *Insert(struct Btree *root,int  ele)
{
	struct Btree *temp,*prev=NULL,*cur;
	temp=(struct Btree *)malloc(sizeof(struct Btree));
	temp->data=ele;
	temp->lchild=temp->rchild=NULL;
	if(root==NULL)return(root=temp);
	cur=root;
	while(cur!=NULL)
	{
		prev=cur;
		if(ele<cur->data)
		cur=cur->lchild;
		else
		cur=cur->rchild;
	}
	if(ele<prev->data)
	prev->lchild=temp;
	else
	prev->rchild=temp;
	return root;
}
void Inorder(struct Btree *ptr)
{
	if(ptr!=NULL)
	{
		Inorder(ptr->lchild);
		printf("%d\t",ptr->data);
		Inorder(ptr->rchild);
	}
}
void preorder(struct Btree *ptr)
{
	if(ptr!=NULL)
	{
		printf("%d\t",ptr->data);
		preorder(ptr->lchild);
		preorder(ptr->rchild);
	}
}
void postorder(struct Btree *ptr)
{
	if(ptr!=NULL)
	{
		postorder(ptr->lchild);
		postorder(ptr->rchild);
		printf("%d\t",ptr->data);
	}
}
int search(struct Btree *root,int key)
{
	struct Btree *cur=root;
	while(cur!=NULL)
	{
		if(key==cur->data)
		return 1;
		if(key<cur->data)
		cur=cur->lchild;
		else
		cur=cur->rchild;
	}
	return 0;
}
main()
{
	struct Btree *root=NULL;
	int i,ch,n,key,flag,ele;
	
	while(1)
	{
		printf("\n\n.....MENU...\n 1.Insert\n 2.Traversals\n 3.search BST\n 4.exit");
		printf("\n Enter your choice:");
		scanf("%d",&ch);
		switch (ch)
		{
			case 1:printf("\n Enter the number of elements to be inserted....\n");
			scanf("%d",&n);
			printf("\n Enter the elements to be inserted....\n");
			for(i=0;i<n;i++)
			{
			scanf("%d",&ele);
			root=Insert(root,ele);
			}
			break;
			case 2:printf("\n preorder sequence...\n");
			preorder(root);
			printf("\n Inorder sequence...\n");
			Inorder(root);
			printf("\n postorder sequence...\n");
			postorder(root);
			break;
			case 3:printf("\n Enter key to be searched...\n");
			scanf("%d", &key);
			flag=search(root, key);
			if(flag)
			printf("\n key is found....\n");
			else
			printf("\n key is not found....\n");
			break;
			case 4:exit(0);
			default: printf("\n wrong choice...try again\n");
		}
	}
	
}





